



A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.




class Solution:
    
    def  numDecodings(self, s: str) -> int:
        n = len(s)
        count = [0] * (n + 1)
        if s[0]!='0':
            count[0] = 1 
            count[1] = 1  

        for i in range(2, n + 1):  

            count[i] = 0  
            if (s[i - 1] > '0'):  
                count[i] = count[i - 1]
                
            if (s[i - 2] == '1' or 
               (s[i - 2] == '2' and 
                s[i - 1] < '7') ):  
                count[i] += count[i - 2];  

        return count[n];  
            
        
